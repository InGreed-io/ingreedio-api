AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for ECR, ECS with autoscaling, and RDS PostgreSQL with VPC and Subnets

Parameters:
  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t3.micro

  DBAllocatedStorage:
    Description: The size of the database (Gb)
    Type: Number
    Default: 20

  DBUsername:
    Description: The database username
    Type: String
    NoEcho: true

  DBPassword:
    Description: The database password
    Type: String
    NoEcho: true

  TaskExecutionRoleArn:
    Description: ARN of an existing IAM role for ECS task execution
    Type: String

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: IngreedioVPC

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IngreedioInternetGateway

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1a

  # Elastic IP for NAT Gateway
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # Route Table for public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # Public Route
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Public Subnet 1a
  PublicSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: PublicSubnet1a
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true

  # Associate Public Subnet 1a with Public Route Table
  PublicSubnet1aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1a
      RouteTableId: !Ref PublicRouteTable

  # Private Subnets
  PrivateSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: PrivateSubnet1a
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]

  PrivateSubnet1b:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: PrivateSubnet1b
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
  PrivateSubnet2a:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: PrivateSubnet2a
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]

  PrivateSubnet2b:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: PrivateSubnet2b
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]

  PrivateSubnet3a:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: PrivateSubnet3a
      VpcId: !Ref VPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]

  PrivateSubnet3b:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: PrivateSubnet3b
      VpcId: !Ref VPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]

  # Route Table for private subnets
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: PrivateRouteTable
      VpcId: !Ref VPC

  # Private Route
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # Associate Private Subnets with Private Route Table
  PrivateSubnet1aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1a
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet1bRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1b
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2a
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2bRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2b
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3a
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3bRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3b
      RouteTableId: !Ref PrivateRouteTable

  # ECR Repositories
  FrontendRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: frontend

  BackendRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: backend

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ingreedio-cluster

  # Task Definition for Frontend
  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: frontend-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref TaskExecutionRoleArn
      Cpu: 256
      Memory: 512
      ContainerDefinitions:
        - Name: frontend
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/frontend:latest"
          Essential: true
          PortMappings:
            - ContainerPort: 8081
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FrontendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: frontend

  # Log Group for Frontend
  FrontendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/frontend

  # Security Group for Frontend
  FrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow HTTP traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8081
          ToPort: 8081
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Load Balancer for Frontend
  FrontendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: frontend-lb
      Subnets:
        - !Ref PrivateSubnet1a
        - !Ref PrivateSubnet1b
      SecurityGroups: [!Ref FrontendSecurityGroup]
      Scheme: internet-facing

  # Target Group for Frontend
  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: FrontendLoadBalancer
    Properties:
      VpcId: !Ref VPC
      Port: 8081
      Protocol: HTTP
      TargetType: ip

  # Listener for Frontend Load Balancer
  FrontendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref FrontendLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup

  # ECS Service for Frontend
  FrontendService:
    Type: AWS::ECS::Service
    DependsOn: FrontendListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      LaunchType: FARGATE
      TaskDefinition: !Ref FrontendTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PrivateSubnet1a
            - !Ref PrivateSubnet1b
          SecurityGroups: [!Ref FrontendSecurityGroup]
      LoadBalancers:
        - TargetGroupArn: !Ref FrontendTargetGroup
          ContainerName: frontend
          ContainerPort: 8081

  # Task Definition for Backend
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: backend-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref TaskExecutionRoleArn
      Cpu: 256
      Memory: 512
      ContainerDefinitions:
        - Name: backend
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/backend:latest"
          Essential: true
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: ConnectionStrings__DefaultConnection
              Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ingreedio/db/ConnectionStrings__DefaultConnection"
            - Name: ASPNETCORE_URLS
              Value: http://+:80
            - Name: ASPNETCORE_ENVIRONMENT
              Value: Production
            - Name: FrontendAppUrl
              Value: !Sub "http://${FrontendLoadBalancer.DNSName}:80"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref BackendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: backend

  # Log Group for Backend
  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/backend

  # Security Group for Backend
  BackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow HTTP traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0

  # Load Balancer for Backend
  BackendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: backend-lb
      Subnets:
        - !Ref PrivateSubnet2a
        - !Ref PrivateSubnet2b
      SecurityGroups: [!Ref BackendSecurityGroup]
      Scheme: internet-facing

  # Target Group for Backend
  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: BackendLoadBalancer
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: ip

  # Listener for Backend Load Balancer
  BackendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref BackendLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  # ECS Service for Backend
  BackendService:
    Type: AWS::ECS::Service
    DependsOn: BackendTaskDefinition
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      LaunchType: FARGATE
      TaskDefinition: !Ref BackendTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PrivateSubnet2a
            - !Ref PrivateSubnet2b
          SecurityGroups: [!Ref BackendSecurityGroup]

  # RDS PostgreSQL Instance
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: ingreedio
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      MultiAZ: true
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup

  # Security Group for RDS
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow access to RDS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref BackendSecurityGroup

  # Subnet Group for RDS
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for RDS instance
      SubnetIds:
        - !Ref PrivateSubnet3a
        - !Ref PrivateSubnet3b

  # Store DB Username in Parameter Store
  DBUsernameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /ingreedio/db/username
      Type: String
      Value: !Ref DBUsername

  # Store DB Password in Parameter Store
  DBPasswordParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /ingreedio/db/password
      Type: String
      Value: !Ref DBPassword

  # Parameter Store for DB Connection String
  DBConnectionString:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /ingreedio/db/ConnectionStrings__DefaultConnection
      Type: String
      Value: !Sub "Server=${DBInstance.Endpoint.Address};Port=5432;Database=ingreedio;User Id=${DBUsername};Password=${DBPassword};"

Outputs:
  FrontendRepositoryUri:
    Description: URI of the Frontend ECR Repository
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/frontend"

  BackendRepositoryUri:
    Description: URI of the Backend ECR Repository
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/backend"

  FrontendLoadBalancerDNS:
    Description: DNS Name of the Frontend Load Balancer
    Value: !GetAtt FrontendLoadBalancer.DNSName

  BackendLoadBalancerDNS:
    Description: DNS Name of the Backend Load Balancer
    Value: !GetAtt BackendLoadBalancer.DNSName

  DBEndpoint:
    Description: Endpoint of the RDS instance
    Value: !GetAtt DBInstance.Endpoint.Address

