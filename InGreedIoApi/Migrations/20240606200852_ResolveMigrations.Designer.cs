// <auto-generated />
using System;
using InGreedIoApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InGreedIoApi.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20240606200852_ResolveMigrations")]
    partial class ResolveMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApiUserPOCOProductPOCO", b =>
                {
                    b.Property<string>("FavouriteById")
                        .HasColumnType("text");

                    b.Property<int>("FavouriteProductsId")
                        .HasColumnType("integer");

                    b.HasKey("FavouriteById", "FavouriteProductsId");

                    b.HasIndex("FavouriteProductsId");

                    b.ToTable("ApiUserPOCOProductPOCO");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.ApiUserPOCO", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("InGreedIoApi.POCO.AppNotificationPOCO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Seen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppNotifications");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.CategoryPOCO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Food"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cosmetics"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Drink"
                        });
                });

            modelBuilder.Entity("InGreedIoApi.POCO.CompanyInfoPOCO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("NIP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("CompanyInfo");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.FeaturingPOCO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("PaymentConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Features");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.IngredientPOCO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("PreferencePOCOId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreferencePOCOId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PreferencePOCOId");

                    b.HasIndex("PreferencePOCOId1");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IconUrl = "https://aptekazawiszy.pl/img/ident/cynamon-na-stole",
                            Name = "Cinamon"
                        },
                        new
                        {
                            Id = 2,
                            IconUrl = "https://5.imimg.com/data5/LV/XV/YR/SELLER-24094004/aloe-vera-oil.jpg",
                            Name = "Aloe oil"
                        },
                        new
                        {
                            Id = 3,
                            IconUrl = "https://www.shutterstock.com/image-photo/cocoa-ingredients-beans-fresh-pod-600nw-2263048751.jpg",
                            Name = "Cocoa"
                        },
                        new
                        {
                            Id = 4,
                            IconUrl = "https://www.organicfacts.net/wp-content/uploads/2013/05/Turmeric-1.jpg",
                            Name = "Turmeric"
                        },
                        new
                        {
                            Id = 5,
                            IconUrl = "https://www.verywellfit.com/thmb/UYfHq07-V-4zMNy8QSeKbEKTVwE=/3944x2958/filters:no_upscale():max_bytes(150000):strip_icc()/GettyImages-1130534199-c10e27a01a1145f1a85dc88b8fa9fc87.jpg",
                            Name = "Quinoa"
                        },
                        new
                        {
                            Id = 6,
                            IconUrl = "https://www.healthline.com/hlcmsresource/images/topic_centers/2020-7/spirulina-powder-pinterest-1296x728-header.jpg",
                            Name = "Spirulina"
                        },
                        new
                        {
                            Id = 7,
                            IconUrl = "https://images-na.ssl-images-amazon.com/images/I/71zna2lq6rL._SL1500_.jpg",
                            Name = "Hemp Seeds"
                        },
                        new
                        {
                            Id = 8,
                            IconUrl = "https://images-na.ssl-images-amazon.com/images/I/81-u7t4GdGL._SL1500_.jpg",
                            Name = "Chia Seeds"
                        },
                        new
                        {
                            Id = 9,
                            IconUrl = "https://www.thespruceeats.com/thmb/5xIGgEKcUWRHrXTnBxZ3FYgMJK8=/4494x2531/smart/filters:no_upscale()/matcha-powder-507284181-58adba215f9b58a3c9315b80.jpg",
                            Name = "Matcha Powder"
                        },
                        new
                        {
                            Id = 10,
                            IconUrl = "https://www.thespruceeats.com/thmb/dyFLswBswq4FV7qRRxdZZfxYFZs=/2733x2733/smart/filters:no_upscale()/GettyImages-529433302-5794ebe65f9b589aa94d7c95.jpg",
                            Name = "Goji Berries"
                        },
                        new
                        {
                            Id = 11,
                            IconUrl = "https://cdn.shopify.com/s/files/1/0250/6972/2416/products/AdobeStock_244960664_1200x1200.jpg?v=1629458542",
                            Name = "Maca Powder"
                        },
                        new
                        {
                            Id = 12,
                            IconUrl = "https://www.thespruceeats.com/thmb/1pHhnqKY8bVqlkigqXcfymy86NU=/2735x2735/smart/filters:no_upscale()/GettyImages-1195962664-121f8b08c99f44b6ba7a6f665204a2bc.jpg",
                            Name = "Wheatgrass"
                        },
                        new
                        {
                            Id = 13,
                            IconUrl = "https://images-na.ssl-images-amazon.com/images/I/61uvnYeNn5L._SL1000_.jpg",
                            Name = "Bee Pollen"
                        },
                        new
                        {
                            Id = 14,
                            IconUrl = "",
                            Name = "Oat"
                        },
                        new
                        {
                            Id = 15,
                            IconUrl = "",
                            Name = "Almond"
                        },
                        new
                        {
                            Id = 16,
                            IconUrl = "",
                            Name = "Strawberry"
                        },
                        new
                        {
                            Id = 17,
                            IconUrl = "",
                            Name = "Cashew"
                        },
                        new
                        {
                            Id = 18,
                            IconUrl = "",
                            Name = "Coconut"
                        },
                        new
                        {
                            Id = 19,
                            IconUrl = "",
                            Name = "Soy"
                        },
                        new
                        {
                            Id = 20,
                            IconUrl = "",
                            Name = "Vanilla"
                        },
                        new
                        {
                            Id = 21,
                            IconUrl = "",
                            Name = "Rice"
                        });
                });

            modelBuilder.Entity("InGreedIoApi.POCO.OperationLogPOCO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("OperationTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OperationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("OperationLog");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.OperationTypePOCO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("OperationTypes");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.PreferencePOCO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.ProductPOCO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("FeaturingId")
                        .HasColumnType("integer");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProducerId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProducerId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Low-fat milk straight from the cow.",
                            IconUrl = "https://mlekovita.com.pl/media/cache/product_view/uploads/images/i3bRQpfKXVq01voDWA7x/8616-mleko-i-love-milk-3-5-3d.jpg",
                            Name = "Cow Milk"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Dairy-free, unsweetened almond milk made from real almonds.",
                            IconUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSD5j8AiAg7gBuP7NIndrWs67vpHiCm5IqbzxTHB3bFTw&s",
                            Name = "Almond Milk"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Dairy-free, unsweetened oat milk made from oat.",
                            IconUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSrv2lqfti5o2EIh2x5JeH88de_UirKJH_KMLeYc_xGZQ&s",
                            Name = "Oat Milk"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "Milk from goats, known for its easier digestion for some.",
                            IconUrl = "https://i5.walmartimages.com/asr/df1d6c29-246d-417e-be0c-04e380939d95_1.bf59e9a558a82e5041f1e9627cc4d8bb.png",
                            Name = "Goat Milk"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "Creamy, non-dairy milk made from the grated flesh of mature coconuts.",
                            IconUrl = "https://shop.goya.com/cdn/shop/files/goya-021647-unsweetened_coconut_milk.png?v=1701110942",
                            Name = "Coconut Milk"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Description = "Plant-based milk made from soybeans, a good source of protein.",
                            IconUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTCa5jVpo4iIUTjSqDSw8Yshk_01pyXDTXZN3LFOCXeGw&s",
                            Name = "Soy Milk"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Description = "Dairy-free milk made from cashews, known for its creamy texture.",
                            IconUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTIShBHK-kvnYi_M8MDkTImJq8VFmiixQDnTkS79lwUKQ&s",
                            Name = "Cashew Milk"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Description = "Dairy-free milk made from ground rice, often hypoallergenic.",
                            IconUrl = "https://target.scene7.com/is/image/Target/GUEST_3c79e695-ec5e-417c-bc17-b0d1e7d38423?wid=488&hei=488&fmt=pjpeg",
                            Name = "Rice Milk"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Description = "Cow milk treated to remove lactose, suitable for those with lactose intolerance.",
                            IconUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQbbrL1hEdFlT3zanJyca_BhFUQHV_c61QH3hiPi7zveA&s",
                            Name = "Lactose-Free Cow Milk"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Description = "Cow milk flavored with cocoa and sugar, a popular drink for children.",
                            IconUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTTPq2ag-ADZAbWNGZrHU7UH-Y1tjn10BzSHdQUV09wpg&s",
                            Name = "Chocolate Milk"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            Description = "Cow milk flavored with strawberry and sugar, another popular flavored milk.",
                            IconUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTVeD2cHeIOKWHkMyx45ronNBdyVmeO5ypTCsfvNK-Odw&s",
                            Name = "Strawberry Milk"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            Description = "Cow milk flavored with vanilla extract and sugar, a classic flavored milk option.",
                            IconUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTNVYNhZg5Wyi4EoL83tRN6lyvCN9xTia1TghlhoFjHGw&s",
                            Name = "Vanilla Flavored Milk"
                        });
                });

            modelBuilder.Entity("InGreedIoApi.POCO.ReviewPOCO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("ReportsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("IngredientPOCOProductPOCO", b =>
                {
                    b.Property<int>("IngredientsId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductsId")
                        .HasColumnType("integer");

                    b.HasKey("IngredientsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("IngredientPOCOProductPOCO");

                    b.HasData(
                        new
                        {
                            IngredientsId = 3,
                            ProductsId = 1
                        },
                        new
                        {
                            IngredientsId = 15,
                            ProductsId = 2
                        },
                        new
                        {
                            IngredientsId = 14,
                            ProductsId = 3
                        },
                        new
                        {
                            IngredientsId = 4,
                            ProductsId = 3
                        },
                        new
                        {
                            IngredientsId = 19,
                            ProductsId = 6
                        },
                        new
                        {
                            IngredientsId = 6,
                            ProductsId = 6
                        },
                        new
                        {
                            IngredientsId = 18,
                            ProductsId = 5
                        },
                        new
                        {
                            IngredientsId = 17,
                            ProductsId = 7
                        },
                        new
                        {
                            IngredientsId = 21,
                            ProductsId = 8
                        },
                        new
                        {
                            IngredientsId = 3,
                            ProductsId = 10
                        },
                        new
                        {
                            IngredientsId = 16,
                            ProductsId = 11
                        },
                        new
                        {
                            IngredientsId = 1,
                            ProductsId = 11
                        },
                        new
                        {
                            IngredientsId = 20,
                            ProductsId = 12
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApiUserPOCOProductPOCO", b =>
                {
                    b.HasOne("InGreedIoApi.POCO.ApiUserPOCO", null)
                        .WithMany()
                        .HasForeignKey("FavouriteById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InGreedIoApi.POCO.ProductPOCO", null)
                        .WithMany()
                        .HasForeignKey("FavouriteProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InGreedIoApi.POCO.ApiUserPOCO", b =>
                {
                    b.HasOne("InGreedIoApi.POCO.CompanyInfoPOCO", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.AppNotificationPOCO", b =>
                {
                    b.HasOne("InGreedIoApi.POCO.ApiUserPOCO", "User")
                        .WithMany("AppNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.FeaturingPOCO", b =>
                {
                    b.HasOne("InGreedIoApi.POCO.ProductPOCO", "Product")
                        .WithOne("Featuring")
                        .HasForeignKey("InGreedIoApi.POCO.FeaturingPOCO", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.IngredientPOCO", b =>
                {
                    b.HasOne("InGreedIoApi.POCO.PreferencePOCO", null)
                        .WithMany("Unwanted")
                        .HasForeignKey("PreferencePOCOId");

                    b.HasOne("InGreedIoApi.POCO.PreferencePOCO", null)
                        .WithMany("Wanted")
                        .HasForeignKey("PreferencePOCOId1");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.OperationLogPOCO", b =>
                {
                    b.HasOne("InGreedIoApi.POCO.OperationTypePOCO", "OperationType")
                        .WithMany("Operations")
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InGreedIoApi.POCO.ApiUserPOCO", "User")
                        .WithMany("Operations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.PreferencePOCO", b =>
                {
                    b.HasOne("InGreedIoApi.POCO.ApiUserPOCO", "User")
                        .WithMany("Preferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.ProductPOCO", b =>
                {
                    b.HasOne("InGreedIoApi.POCO.CategoryPOCO", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InGreedIoApi.POCO.ApiUserPOCO", "Producer")
                        .WithMany("ProduceProducts")
                        .HasForeignKey("ProducerId");

                    b.Navigation("Category");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.ReviewPOCO", b =>
                {
                    b.HasOne("InGreedIoApi.POCO.ProductPOCO", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InGreedIoApi.POCO.ApiUserPOCO", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IngredientPOCOProductPOCO", b =>
                {
                    b.HasOne("InGreedIoApi.POCO.IngredientPOCO", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InGreedIoApi.POCO.ProductPOCO", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InGreedIoApi.POCO.ApiUserPOCO", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InGreedIoApi.POCO.ApiUserPOCO", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InGreedIoApi.POCO.ApiUserPOCO", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InGreedIoApi.POCO.ApiUserPOCO", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InGreedIoApi.POCO.ApiUserPOCO", b =>
                {
                    b.Navigation("AppNotifications");

                    b.Navigation("Operations");

                    b.Navigation("Preferences");

                    b.Navigation("ProduceProducts");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.CategoryPOCO", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.CompanyInfoPOCO", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.OperationTypePOCO", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.PreferencePOCO", b =>
                {
                    b.Navigation("Unwanted");

                    b.Navigation("Wanted");
                });

            modelBuilder.Entity("InGreedIoApi.POCO.ProductPOCO", b =>
                {
                    b.Navigation("Featuring");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
